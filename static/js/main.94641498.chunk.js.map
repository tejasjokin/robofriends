{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","mail","id","className","alt","src","Cardlist","robots","map","user","i","key","email","Searchbox","onSearchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","event","searchfield","target","value","fetch","then","response","json","users","filterrobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,G,KAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,GAC3B,OACC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA4BH,EAA5B,YACpB,6BACC,4BAAKF,GACL,2BAAIC,OCSOK,EAdE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OACnB,OACC,oCAEEA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CAAMC,IAAOF,EAAKP,GAAIF,KAAQS,EAAKT,KAAMC,KAAQQ,EAAKG,MAAOV,GAAMO,EAAKP,UCK/DW,EAbG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,eACpB,OACC,yBAAKX,UAAU,OACf,2BACAA,UAAY,yCACZY,KAAK,SACLC,YAAY,eACZC,SAAaH,MCEAI,EATA,SAACC,GAEf,OACC,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAS,kBAAmBC,OAAQ,UACrEJ,EAAMK,WCuBIC,E,kDAzBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACZC,UAAW,GAHK,E,8DAOAC,EAAOC,GAExBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAGG,KAAKJ,MAAMC,SAEN,2DAIAG,KAAKX,MAAMK,a,GAtBOQ,aCyDbC,G,wDAlDd,aACC,IAAD,8BACC,gBAcDnB,eAAiB,SAACoB,GAEjB,EAAKH,SAAS,CAAEI,YAAcD,EAAME,OAAOC,SAf3C,EAAKX,MACL,CACCnB,OAAS,GACT4B,YAAc,IALhB,E,gEASoB,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAExB,OAASmC,S,+BAQzC,IAAD,EACiCZ,KAAKJ,MAA7BnB,EADT,EACSA,OAAQ4B,EADjB,EACiBA,YACVQ,EAAepC,EAAOqC,QAAO,SAAArC,GAClC,OAAOA,EAAOP,KAAK6C,cAAcC,SAASX,EAAYU,kBAEvD,OAAItC,EAAOwC,OAQV,yBAAK5C,UAAU,MACd,yBAAKA,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWW,eAAkBgB,KAAKhB,kBAElC,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUP,OAAWoC,OAZvB,2C,GA/BcX,cCKEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.94641498.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({name , mail, id}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow shadow-2\">\r\n\t\t\t<img alt=\"robot\" src = {`https://robohash.org/${id}?10*10`}></img>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{mail}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\nimport 'tachyons';\r\n\r\nconst Cardlist = ({ robots }) =>{\r\n\treturn(\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) =>{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card key = {user.id} name = {user.name} mail = {user.email} id = {user.id}/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({ onSearchchange }) =>{\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t<input \r\n\t\tclassName = \"tc b br3 pa3 ba b--green bg-washed-red\" \r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"Search robot\"\r\n\t\tonChange = { onSearchchange } \r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\treturn(\r\n\t\t<div style = {{overflowY: 'scroll', border : \"2px solid black\", height: \"500px\"}}>\r\n\t\t\t{ props.children }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component\r\n{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info)\r\n\t{\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tif(this.state.hasError)\r\n\t\t{\r\n\t\t\treturn <h1>OOOPSS SOMETHING WENT WRONG</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn this.props.children\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{ Component } from 'react';\r\nimport Cardlist from '../Components/Cardlist.js';\r\nimport Searchbox from '../Components/Searchbox.js';\r\nimport Scroll from '../Components/Scroll.js'\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\nimport './App.css';\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper()\r\n\t\tthis.state = \r\n\t\t{\r\n\t\t\trobots : [],\r\n\t\t\tsearchfield : ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response =>  response.json())\r\n\t\t.then(users => {this.setState({ robots : users})})\r\n\t}\r\n\r\n\tonSearchchange = (event) =>\r\n\t{\r\n\t\tthis.setState({ searchfield : event.target.value})\r\n\t}\r\n\trender()\r\n\t{\r\n\t\tconst { robots, searchfield } = this.state\r\n\t\tconst filterrobots = robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t})\r\n\t\tif(!robots.length)\r\n\t\t{\r\n\t\t\treturn(\r\n\t\t\t\t<h1>LOADING</h1>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<nav className=\"tc\">\r\n\t\t\t\t<h1>ROBOFRIENDS</h1>\r\n\t\t\t\t<Searchbox onSearchchange = {this.onSearchchange}/>\r\n\t\t\t\t</nav>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<Cardlist robots = { filterrobots } />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\timport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}