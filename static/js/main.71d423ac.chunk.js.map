{"version":3,"sources":["reducers.js","Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Card","name","mail","id","className","alt","src","Cardlist","map","user","i","key","email","Searchbox","onSearchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","App","onRequestRobots","filterrobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.71d423ac.chunk.js","sourcesContent":["import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD: \r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\trobots: [],\r\n\tisPending: false,\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING: \r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: true });\r\n\t\tdefault: \r\n\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = ({name , mail, id}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow shadow-2\">\r\n\t\t\t<img alt=\"robot\" src = {`https://robohash.org/${id}?10*10`}></img>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{mail}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\nimport 'tachyons';\r\n\r\nconst Cardlist = ({ robots }) =>{\r\n\treturn(\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i) =>{\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card key = {user.id} name = {user.name} mail = {user.email} id = {user.id}/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({ onSearchchange }) =>{\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t<input \r\n\t\tclassName = \"tc b br3 pa3 ba b--green bg-washed-red\" \r\n\t\ttype=\"search\" \r\n\t\tplaceholder=\"Search robot\"\r\n\t\tonChange = { onSearchchange } \r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n\treturn(\r\n\t\t<div style = {{overflowY: 'scroll', border : \"2px solid black\", height: \"500px\"}}>\r\n\t\t\t{ props.children }\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component\r\n{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info)\r\n\t{\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tif(this.state.hasError)\r\n\t\t{\r\n\t\t\treturn <h1>OOOPSS SOMETHING WENT WRONG</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn this.props.children\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React,{ Component } from 'react';\r\nimport Cardlist from '../Components/Cardlist.js';\r\nimport Searchbox from '../Components/Searchbox.js';\r\nimport Scroll from '../Components/Scroll.js'\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions.js';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn{\r\n\t\tonSearchchange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots()),\r\n\t}\r\n}\r\n\r\nclass App extends Component\r\n{\r\n\tcomponentDidMount(){\r\n\t\tthis.props.onRequestRobots();\r\n\t}\t\r\n\r\n\trender()\r\n\t{\r\n\t\tconst { searchField, onSearchchange, robots, isPending } = this.props\r\n\t\tconst filterrobots = robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\tif(isPending)\r\n\t\t{\r\n\t\t\treturn(\r\n\t\t\t\t<h1>LOADING</h1>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<nav className=\"tc\">\r\n\t\t\t\t<h1>ROBOFRIENDS</h1>\r\n\t\t\t\t<Searchbox onSearchchange = {onSearchchange}/>\r\n\t\t\t\t</nav>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<Cardlist robots = { filterrobots } />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n } from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response =>  response.json())\r\n\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport { searchRobots, requestRobots } from './reducers.js';\r\nimport App from './Containers/App.js';\r\nimport * as serviceWorker from './serviceWorker';\t\r\nimport 'tachyons';\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  \t<Provider store = { store }>\r\n\t\t<App />\r\n\t</Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}